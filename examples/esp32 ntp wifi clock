
/* -------------------------------------------------
   NTP Clock
   using ESP32 and Lixie Displays!
   by Connor Nishijima - 12/28/2016 - originally
   -------------------------------------------------
   To use your Lixie Displays / ESP8266 as an NTP
   clock, you'll need a few things:
   - WIFI_SSID
   - WIFI_PASSWORD
   x SIX_DIGIT
   x TIME_COLOR_RGB
   - TIME_OFFSET
  SIX_DIGIT is a true/false for 6 or 4 digit clocks
  TIME_COLOR_RGB is an 8-bit RGB value to color the displays
  TIME_OFFSET is your local UTC offset for time zones
   -------------------------------------------------
*/

#include "Lixie_II.h" // Include Lixie Library
#define DATA_PIN   5
#define NUM_LIXIES 4
Lixie_II lix(DATA_PIN, NUM_LIXIES);

#define TCP_MSS whatever
#define LWIP_IPV6 whatever
#define LWIP_FEATURES whatever
#define LWIP_OPEN_SRC whatever

#include <TimeLib.h>
#include <WiFi.h>


#include <WiFiUdp.h>
#include <WiFiMulti.h>   // WifiMulti Lib for connection handling
WiFiMulti WiFiMulti;

//---------------------------------------
const char* WIFI_SSID = "******************";  //  your network SSID (name)
const char* WIFI_PASS = "******************";  //  your network password

const bool SIX_DIGIT = false; // True if 6-digit clock with seconds
const byte TIME_COLOR_RGB[3] = {0,255,255}; // CYAN
const int TIME_OFFSET = -8;     // CA
//---------------------------------------

// NTP Servers:
static const char ntpServerName[] = "us.pool.ntp.org";
//static const char ntpServerName[] = "time.nist.gov";
//static const char ntpServerName[] = "time-a.timefreq.bldrdoc.gov";
//static const char ntpServerName[] = "time-b.timefreq.bldrdoc.gov";
//static const char ntpServerName[] = "time-c.timefreq.bldrdoc.gov";

WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

time_t getNtpTime();
void digitalClockDisplay();
void sendNTPpacket(IPAddress &address);

void setup()
{
  lix.begin(); // Initialize LEDs
  lix.white_balance(Tungsten100W); // Default

  Serial.begin(115200);
  WiFiMulti.addAP(WIFI_SSID, WIFI_PASS); // Your WIFI credentials


  // This sets all lights to yellow while we're connecting to WIFI
  while ((WiFiMulti.run() != WL_CONNECTED)) {
    lix.color(255, 255, 0);
    lix.write(1111);
    delay(100);
  }
 
  // Green on connection success
  lix.color(0, 255, 0);
  lix.write(9999);
  delay(500);

  // Reset colors to default
  lix.color(255, 255, 255);
  lix.clear();

  Serial.println("");
  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());
  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
  setSyncInterval(300);
}

time_t prevDisplay = 0; // when the digital clock was displayed

void loop()
{
  int current;
  //Serial.println(hour());
  //Serial.println(minute());
  current=(hour()*100)+minute();
 if(current>1200){current-=1200;}
 if(current<100){current+=1200;}
 
  if (timeStatus() != timeNotSet) {
      
    if (current != prevDisplay) { //update the display only if time has changed
      Serial.print("preivous: ");
      Serial.println(prevDisplay);
      Serial.print("current: ");
      Serial.println(current);  
      digitalClockDisplay();
    }
  }
}

void digitalClockDisplay()
{
  lix.nixie(); //nixie style coloring
  // digital clock display of the time
  int current_time;
  int ones;
  int tens;
  int hundreds;
  int thousands;
  int temp;
  int t;

  t=60;

 current_time=(hour()*100)+minute();
 if(current_time>1200){current_time-=1200;}
 if(current_time<100){current_time+=1200;}

 prevDisplay=current_time;


  //roll through numbers here!!!! use lix.write_float(2.0, 1);
  ones = (current_time%10);
  tens = ((current_time/10)%10);
  hundreds = ((current_time/100)%10);
  thousands = (current_time/1000);
  
  //roll ones digit
   
  for(int i=0;i<10;i++){
    temp=ones+i;
    if (temp>9){temp-=10;}
    current_time=temp;
    lix.write(current_time);
    //Serial.println(temp);
    delay(t);
  }
  //roll tens digit
   
  for(int j=0;j<10;j++){
    temp=tens+j;
    if (temp>9){temp-=10;}
    current_time=(temp*10)+ones;
    lix.write(current_time);
    delay(t);
  }

  //roll hundreds digit
   
  for(int k=0;k<10;k++){
    temp=hundreds+k;
    if (temp>9){temp-=10;}
    current_time=(temp*100)+(tens*10)+ones;
    lix.write(current_time);
    delay(t);
  }

    //roll thousands digit
  if(thousands>0){ 
    for(int l=0;l<10;l++){
      temp=thousands+l;
      if (temp>9){temp-=10;}
      current_time=(temp*1000)+(hundreds*100)+(tens*10)+ones;
      lix.write(current_time);
      delay(t);
    }
    
    //do more here if you want 6 digit displays. I only did a 4 digit display.
  }

  current_time=(thousands*1000)+ (hundreds*100)+(tens*10)+ones;
    lix.write(current_time);
    delay(t);

  //lix.color_all(OFF, CRGB(0,0,0));
  //lix.gradient_rgb(ON, CRGB(255,0,0), CRGB(0,0,255));
  
  //lix.color(TIME_COLOR_RGB[0],TIME_COLOR_RGB[1],TIME_COLOR_RGB[2]);
  //for(uint8_t i = 0; i < 10000; i=i+1111){
    //lix.write(i);
    //delay(250);
  //}

  lix.write(current_time);
  Serial.println(current_time);
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

time_t getNtpTime()
{
  IPAddress ntpServerIP; // NTP server's ip address

  while (Udp.parsePacket() > 0) ; // discard any previously received packets
  Serial.println("Transmit NTP Request");
  // get a random server from the pool
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + TIME_OFFSET * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address)
{
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
